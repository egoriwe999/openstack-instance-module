data "openstack_images_image_v2" "packer_image" {
  name        = "ubuntu_baseline_v1"
  most_recent = true
}

# generate cloud-config YAML from the template
data "template_file" "cloud_init_config" {
  template = file("${path.module}/init.yml.tpl")
  vars     = local.cert_data
}

resource "openstack_compute_instance_v2" "instance" {
  name            = var.name_prefix
  image_id        = coalesce(var.image_id, data.openstack_images_image_v2.packer_image.id)
  flavor_name     = var.flavor_name
  key_pair        = var.ssh_key.name
  security_groups = var.security_groups

  lifecycle {
    ignore_changes = [
      user_data,
    ]
  }

  network {
    name = var.network_name
  }

  connection {
    type        = "ssh"
    user        = var.ssh_user
    host        = self.access_ip_v4
    port        = 22
    private_key = var.ssh_key.private_key
  }

  provisioner "remote-exec" {
    # authorize master SSH key for main logins
    # add port 2222 in first line for Gitlab needs
    inline = [
      "echo 'Port 2222' | sudo tee -a /etc/ssh/sshd_config",
      "sudo systemctl restart sshd",
      "echo '# master SSH key' | tee -a /home/${var.ssh_user}/.ssh/authorized_keys",
      "echo '${var.master_ssh_public_key}' | tee -a /home/${var.ssh_user}/.ssh/authorized_keys",
      "echo '# master SSH key' | sudo tee -a /root/.ssh/authorized_keys",
      "echo '${var.master_ssh_public_key}' | sudo tee -a /root/.ssh/authorized_keys",
    ]
  }

  provisioner "remote-exec" {
    inline     = var.launch_commands
    on_failure = continue
  }

  depends_on = [
    openstack_blockstorage_volume_v3.data_volume,
  ]
}

# create as many volumes as requested
resource "openstack_blockstorage_volume_v3" "data_volume" {
  count                = length(var.volumes)
  name                 = coalesce(var.volumes[count.index].name, var.name_prefix)
  size                 = var.volumes[count.index].size
  description          = var.volumes[count.index].description
  enable_online_resize = true
}

resource "openstack_compute_volume_attach_v2" "data_volume_attachment" {
  count       = length(var.volumes)
  instance_id = openstack_compute_instance_v2.instance.id
  volume_id   = openstack_blockstorage_volume_v3.data_volume[count.index].id

  lifecycle {
    replace_triggered_by = [
      # recreate volume attachment if its size has changed
      openstack_blockstorage_volume_v3.data_volume[count.index].size,
    ]
  }

  connection {
    type        = "ssh"
    user        = var.ssh_user
    host        = openstack_compute_instance_v2.instance.access_ip_v4
    port        = 2222
    private_key = var.ssh_key.private_key
  }

  provisioner "file" {
    source      = "${path.module}/disk_mounter.sh"
    destination = "/tmp/disk_mounter.sh"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo chmod +x /tmp/disk_mounter.sh",
      "sudo /tmp/disk_mounter.sh ${self.device} ${var.volumes[count.index].mount_point}",
    ]
    # these are allowed to fail in case we're recreating the instance
    # but the volumes already contain a file system
    on_failure = continue
  }
}

###
resource "random_password" "teleport-token" {
  length  = 32
  special = false
}

resource "teleport_provision_token" "teleport-token-exec" {
  metadata = {
    expires     = "2023-10-12T07:20:51Z" # Set expiration to 30 days (720 hours) from now
    description = "Bot join token for test generated by Terraform"

    name = random_password.teleport-token.result
  }

  spec = {
    roles       = ["Node"]
    node_name   = "Node"
    join_method = "token"
  }
}

resource "null_resource" "teleport_mounter" {
  connection {
    type        = "ssh"
    user        = var.ssh_user
    host        = openstack_compute_instance_v2.instance.access_ip_v4
    port        = 2222
    private_key = var.ssh_key.private_key
  }

  provisioner "remote-exec" {
    inline = [
      "sudo apt update -y",
      "curl https://goteleport.com/static/install.sh | bash -s 13.2.2",
      "echo '${teleport_provision_token.teleport-token-exec.metadata.name}' > /home/ubuntu/token.file",
      "sudo teleport node configure --output=file:///etc/teleport.yaml --token=/home/ubuntu/token.file --proxy=teleport-test.opigno.cloud:443",
      "sudo bash /home/ubuntu/install.sh 13.2.1",
      "sudo systemctl enable teleport",
      "sudo systemctl start teleport"
    ]
  }
}

data "vault_generic_secret" "new-relic" {
  path = "terraform_credentials/new-relic"
}

resource "null_resource" "new-relic" {
  depends_on = [null_resource.teleport_mounter]
  connection {
    type        = "ssh"
    user        = var.ssh_user
    host        = openstack_compute_instance_v2.instance.access_ip_v4
    port        = 2222
    private_key = var.ssh_key.private_key
  }

  provisioner "remote-exec" {
    inline = [
      "curl -Ls https://download.newrelic.com/install/newrelic-cli/scripts/install.sh | bash && sudo  NEW_RELIC_API_KEY=${data.vault_generic_secret.new-relic.data["NEW_RELIC_API_KEY"]} NEW_RELIC_ACCOUNT_ID=${data.vault_generic_secret.new-relic.data["NEW_RELIC_ACCOUNT_ID"]} NEW_RELIC_REGION=${data.vault_generic_secret.new-relic.data["NEW_RELIC_REGION"]} /usr/local/bin/newrelic install -y"
    ]
  }
}
